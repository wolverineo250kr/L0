// Code generated by MockGen. DO NOT EDIT.
// Source: D:\L0\order-service\internal\interfaces\interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "order-service/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDatabase) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDatabaseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabase)(nil).Close))
}

// GetOrder mocks base method.
func (m *MockDatabase) GetOrder(orderUID string) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", orderUID)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockDatabaseMockRecorder) GetOrder(orderUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockDatabase)(nil).GetOrder), orderUID)
}

// GetRecentOrders mocks base method.
func (m *MockDatabase) GetRecentOrders(limit int) (map[string]*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentOrders", limit)
	ret0, _ := ret[0].(map[string]*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentOrders indicates an expected call of GetRecentOrders.
func (mr *MockDatabaseMockRecorder) GetRecentOrders(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentOrders", reflect.TypeOf((*MockDatabase)(nil).GetRecentOrders), limit)
}

// SaveOrder mocks base method.
func (m *MockDatabase) SaveOrder(order *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrder", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrder indicates an expected call of SaveOrder.
func (mr *MockDatabaseMockRecorder) SaveOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockDatabase)(nil).SaveOrder), order)
}

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// BulkSet mocks base method.
func (m *MockCache) BulkSet(orders map[string]*models.Order) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BulkSet", orders)
}

// BulkSet indicates an expected call of BulkSet.
func (mr *MockCacheMockRecorder) BulkSet(orders interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkSet", reflect.TypeOf((*MockCache)(nil).BulkSet), orders)
}

// Get mocks base method.
func (m *MockCache) Get(orderUID string) (*models.Order, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", orderUID)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(orderUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), orderUID)
}

// Set mocks base method.
func (m *MockCache) Set(orderUID string, order *models.Order) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", orderUID, order)
}

// Set indicates an expected call of Set.
func (mr *MockCacheMockRecorder) Set(orderUID, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCache)(nil).Set), orderUID, order)
}
